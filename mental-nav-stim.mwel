//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stimuli
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stimuli display parameters
var stim_size = 7
var stim_padding = 2
var stim_position_y = 1
var view_options = 0
%define num_options = 6

group 'Behavior' {
    var nsuccess = 0
    var nfailure = 0
    var sel_index = 0

}
group 'Python parameters' {
    var py_start_stim_index = 0
    var py_end_stim_index = 0
    var py_pair_index = 0
    var py_stim_dist_cum = []
    var py_meta_index = 0
    var py_stim_drift_direction = 0
    var py_options_list = []
}

%define num_stims = 6
var num_pairs = num_stims * (num_stims - 1)


group 'Sequence variables' {

    var start_stim_index = 0
    var end_stim_index = 0
    var stim_index (scope = local; default_value = 0)
    var pair_index (scope = local; default_value = 0)
    var option_stim_index (scope = local; default_value = 0)
    var stim_dist_cum = [0, 0, 0, 0, 0, 0]
}

group 'Stimulus drift variables' {
    var stim_drift_speed = 8
    var stim_drift_direction = 0
    var stim_drift_start_time = 0
    var stim_drift_fixed = 0
    var stim_offset = 0
}

// Methods to iterate through stimuli and stimuli pairs
%define for_each_stim ()
    range_replicator (
        variable = stim_index
        from = 0
        to = num_stims - 1
        step = 1
        )
%end

%define for_each_option_stim ()
    range_replicator (
        variable = option_stim_index
        from = 0
        to = num_options - 1
        step = 1
    )
% end

%define for_each_pair ()
    range_replicator (
        variable = pair_index
        from = 0
        to = num_pairs - 1
        step = 1
       )
%end


%define stim_drift_wrap = (py_stim_drift_direction == -1 and start_stim_index > end_stim_index) or (py_stim_drift_direction == 1 and end_stim_index > start_stim_index)
%define stim_drift_symb_dist = abs(stim_drift_wrap * num_stims - abs(start_stim_index - end_stim_index))
%define stim_drift_spat_dist = abs(stim_drift_wrap * stim_dist_cum[num_stims - 1] + py_stim_drift_direction * (stim_dist_cum[start_stim_index] - stim_dist_cum[end_stim_index]))

var stim_drift_wrap_var = stim_drift_wrap
var stim_drift_symb_dist_var = stim_drift_symb_dist
var stim_drift_spat_dist_var = stim_drift_spat_dist

%define stim_drift_max = display_bounds('right') - stim_offset
%define stim_drift_min = display_bounds('left') - stim_offset - (num_stims - 1) * (stim_size) - stim_dist_cum[num_stims - 1] * stim_padding

var stim_drift_max_var = stim_drift_max
var stim_drift_min_var = stim_drift_min


%define stim_drift = stim_drift_direction * stim_drift_speed * (next_frame_time() - stim_drift_start_time) / 1e6

%define stim_drift_end_pos = stim_drift_symb_dist * stim_size + stim_drift_spat_dist * stim_padding
%define stim_drift_end_neg = stim_drift_direction * (stim_drift_symb_dist * stim_size + stim_drift_spat_dist * stim_padding)


%define stim_seq_length = (num_stims) * (stim_size) + stim_dist_cum[num_stims - 1] * stim_padding
%define stim_position_x = stim_offset + ${stim_index} * (stim_size) + stim_dist_cum[${stim_index}] * stim_padding + stim_drift + stim_drift_fixed

%define stim_wrapped_right = ((stim_position_x < (display_bounds('left') - stim_size/2)))
%define stim_wrapped_left  = ((stim_position_x > (display_bounds('right') + stim_size/2)))
var option_distance = 8
var option_stim_size = 5
var option_selector_distance = 13
%define option_stim_position_x = option_distance * cos(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define option_stim_position_y = option_distance * sin(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define option_stim_selector_position_x = option_selector_distance * cos(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define option_stim_selector_position_y = option_selector_distance * sin(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define stim_position_x_wrapped =  (stim_wrapped_right) * stim_seq_length + (-1 * stim_wrapped_left) * stim_seq_length + stim_position_x
var begin_drift = 0
%define view_stim = begin_drift * (view_options * (1 - (${stim_index} != end_stim_index)) + (1 - view_options))
var m_alpha = 0

%define alpha_multiplier = m_alpha * stim_drift / stim_drift_speed

stimulus_group mask_stims {
    for_each_stim {
        rectangle 'mask_stim_${stim_index}' (
            color = 0.7, 0.7, 0.7
            x_size = stim_size
            x_position = stim_position_x_wrapped
            y_position = 0
	        alpha_multiplier = view_stim *  max(min(alpha_multiplier, 1), 0)
	    )
    }
}

var option_selectors_in_window = [0, 0, 0, 0, 0, 0]

var eye_in_selector = false
stimulus_group option_stims_selectors {
    for_each_option_stim {
        circular_fixation_point 'selector_fixator_${option_stim_index}' (
            alpha_multiplier = view_options
            trigger_width = fixation_width
            trigger_watch_x = eye_h
            trigger_watch_y = eye_v
            trigger_flag = eye_in_selector
            color = 1,0,0
            x_size = fixation_point_size
            x_position = option_selector_distance * cos(2 * pi() / num_options * ${option_stim_index})
            y_position = option_selector_distance * sin(2 * pi() / num_options * ${option_stim_index})
        )
    }
}





stimulus_group option_stims {
    for_each_option_stim {
        image_file 'img_option_stim_${option_stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/imageset5/${option_stim_index}.jpg"
            x_size = option_stim_size
            x_position = option_stim_position_x
            y_position = option_stim_position_y
	        alpha_multiplier = view_options
	    )
    }
}

stimulus_group img_stims {
    for_each_stim {
        image_file 'img_stim_${stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/imageset5/${stim_index}.jpg"
            x_size = stim_size
            x_position = stim_position_x_wrapped
	        y_position = 0
	        alpha_multiplier = view_stim
        )
    }
}
