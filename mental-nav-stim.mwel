// var n_stims_temp = 6
stimulus_display (
    background_color = br, bg, bb
    redraw_on_every_refresh = true
    announce_stimuli_on_implicit_updates = false
)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variable groups
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define mask_width = display_bounds('right')

%define num_stims = 8


group 'Stimulus display variables' {
    var br = 0.5
    var bg = 0.5
    var bb = 0.5

    var stim_size = 7
    var stim_padding = 1
    var stim_position_y = 1

    var option_distance = 8
    var option_stim_size = 3
    var option_selector_distance = 11

    var alpha_m = 0
    var alpha_m_inc = 0.1
    var nconsecsucc_increment = 3

    var num_visible_stims = 1
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Range replicator macros
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


%define for_each_stim ()
    range_replicator (
        variable = stim_index
        from = 0
        to = num_stims - 1
        step = 1
    )
%end

%define for_each_option_stim ()
    range_replicator (
        variable = option_stim_index
        from = 0
        to = num_stims - 1
        step = 1
    )
% end

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Visibility macros
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
%define view_fixation_point = fixation
%define view_center_indicator = pre_drift or drift or post_drift or pre_choice or choice or feedback
%define view_window_mask = 0 // not choice


%define stim_index_seq = stim_pos[${stim_index}]
%define stim_index_vis = stim_bin[${stim_index}]

%define view_stims = stim_index_vis and ((pre_drift and stim_index_seq == start_stim_index) or (drift and not testing) or post_drift or ((pre_choice or choice or feedback) and stim_index_seq == end_stim_index))
%define view_stim_masks = stim_index_vis and (pre_drift and stim_index_seq != start_stim_index) or drift or post_drift or ((pre_choice or choice or feedback) and stim_index_seq == end_stim_index)
%define view_option_stims = ((pre_choice or choice) and (options_bin[${option_stim_index}])) or (feedback and selected == ${option_stim_index})
%define view_option_selectors (index) (choice or (feedback and selected == index))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Color macros
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define red = choice or (feedback and (failure or ignore))
%define green = choice or (feedback and success)
%define blue = choice

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Stimulus drift macros
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%define stim_offset = -(start_stim_index) * stim_size - (start_stim_index + 1) * stim_padding

%define cycle = end_stim_index == start_stim_index

%define wrap = stim_drift_direction * (end_stim_index - start_stim_index) > 0

%define stim_drift_transition_dur = (next_frame_time() - stim_drift_start_time) / 1e6
%define stim_drift_transition = drift_transition * stim_drift_direction * stim_drift_speed * stim_drift_transition_dur
%define stim_drift_transition_end = stim_padding + stim_size

%define stim_drift_symb_dist = (1 - cycle) * abs(wrap * n_stims - abs(start_stim_index - end_stim_index)) + (cycle) * n_stims
%define stim_drift_spat_dist = (1 - cycle) * abs(wrap * n_stims + stim_drift_direction * (start_stim_index - end_stim_index)) + (cycle) * (n_stims + 1)

%define stim_drift_dur = (next_frame_time() - stim_drift_start_time) / 1e6
%define stim_drift = drift_transition * stim_drift_transition + stim_drift_fixed

%define stim_drift_end = (stim_drift_symb_dist * stim_size) + (stim_drift_spat_dist * stim_padding)

%define stim_seq_length = (n_stims) * (stim_size) + (n_stims + 1) * stim_padding

%define stim_wrapped_right = ((stim_position_x < (display_bounds('left') + stim_size)))
%define stim_wrapped_left  = ((stim_position_x > (display_bounds('right') - stim_size)))

%define stim_position_x = stim_offset + stim_index_seq * (stim_size) + (stim_index_seq + 1) * stim_padding + drift * stim_drift + (1 - drift) * stim_drift_fixed
%define stim_position_x_wrapped = (stim_wrapped_right + -1 * stim_wrapped_left) * stim_seq_length + stim_position_x

%define option_stim_position_x = option_distance * cos(2 * pi() / num_options * options_pos[${option_stim_index}])
%define option_stim_position_y = option_distance * sin(2 * pi() / num_options * options_pos[${option_stim_index}])

%define option_stim_selector_position_x (index) option_selector_distance * cos(2 * pi() / num_options * options_pos[index])
%define option_stim_selector_position_y (index) option_selector_distance * sin(2 * pi() / num_options * options_pos[index])

%define alpha_multiplier_drift = 0// (1 - testing) * min(max(alpha_m * stim_drift_dur, 0), 1) + testing

%define keyboard_selected (index) options_pos[index] == 0 and l_pressed or options_pos[index] == 1 and a_pressed
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Stimuli
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rectangle center_indicator (
    color = 0.75, 0.75, 0.75
    x_size = stim_size + 0.75
    y_size = stim_size + 0.75
    y_position = 0
    x_position = 0
    alpha_multiplier = view_center_indicator
)

rectangle center_indicator_fill (
    color = 0.5, 0.5, 0.5
    x_size = stim_size + 0.25
    y_size = stim_size + 0.25
    y_position = 0
    x_position = 0
    alpha_multiplier =  view_center_indicator
)

rectangle window_mask_left (
    color = br, bg, bb
    x_size = mask_width
    y_size = stim_size*3/2
    x_position = - (mask_width + num_visible_stims * stim_size) / 2 - 0.75
    y_position = 0
    alpha_multiplier = view_window_mask
)

rectangle window_mask_right (
    color = br, bg, bb
    x_size = mask_width
    y_size = stim_size*3/2
    x_position = (mask_width + num_visible_stims * stim_size) / 2 + 0.75
    y_position = 0
    alpha_multiplier = view_window_mask
)

stimulus_group mask_stims {
    for_each_stim {
        rectangle 'mask_stim_${stim_index}' (
            color = 0.1, 0.1, 0.1
            x_size = stim_size
            x_position = stim_position_x_wrapped
            y_position = 0
            alpha_multiplier = view_stim_masks * (drift * alpha_multiplier_drift + (1 - drift) * alpha_multiplier_fixed)
	    )
    }
}

stimulus_group option_stims {
    for_each_option_stim {
        image_file 'img_option_stim_${option_stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/objects1/${option_stim_index}.jpg"
            x_size = option_stim_size
            x_position = option_stim_position_x
            y_position = option_stim_position_y
	        alpha_multiplier = view_option_stims
	    )
    }
}

stimulus_group img_stims {
    for_each_stim {
        image_file 'img_stim_${stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/objects1/${stim_index}.jpg"
            x_size = stim_size
            x_position = stim_position_x_wrapped
	        y_position = 0
	        alpha_multiplier = view_stims
        )
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////// Option selectors
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

group 'Option selector flags' {
    var selected_0 = 0
    var selected_1 = 0
    var selected_2 = 0
    var selected_3 = 0
    var selected_4 = 0
    var selected_5 = 0
    var selected_6 = 0
    var selected_7 = 0
}

// Option selector 'index' corresponds to the sequence index

circular_fixation_point option_selector_0 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y //eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_0
    x_position = option_stim_selector_position_x (0)
    y_position = option_stim_selector_position_y (0)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (0) * options_bin[0]
)

circular_fixation_point option_selector_1 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_1
    x_position = option_stim_selector_position_x (1)
    y_position = option_stim_selector_position_y (1)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (1) * options_bin[1]
)

circular_fixation_point option_selector_2 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x// eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_2
    x_position = option_stim_selector_position_x (2)
    y_position = option_stim_selector_position_y (2)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (2) * options_bin[2]
)

circular_fixation_point option_selector_3 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_3
    x_position = option_stim_selector_position_x (3)
    y_position = option_stim_selector_position_y (3)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (3) * options_bin[3]
)

circular_fixation_point option_selector_4 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_4
    x_position = option_stim_selector_position_x (4)
    y_position = option_stim_selector_position_y (4)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (4) * options_bin[4]
)

circular_fixation_point option_selector_5 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_5
    x_position = option_stim_selector_position_x (5)
    y_position = option_stim_selector_position_y (5)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (5) * options_bin[5]
)
/*
circular_fixation_point option_selector_6 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_6
    x_position = option_stim_selector_position_x (6)
    y_position = option_stim_selector_position_y (6)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (6) * options_bin[6]
)

circular_fixation_point option_selector_7 (
    trigger_width = fixation_width
    trigger_watch_x = pointer_x // eye_h * (1 - use_mouse) + use_mouse * pointer_x
    trigger_watch_y = pointer_y // eye_v * (1 - use_mouse) + use_mouse * pointer_y
    trigger_flag = selected_7
    x_position = option_stim_selector_position_x (7)
    y_position = option_stim_selector_position_y (7)
    x_size = 1
    color = red, green, blue
    alpha_multiplier = view_option_selectors (7) * options_bin[7]
)
*/
%define display_option_selectors()
    live_queue_stimulus(option_selector_0)
    live_queue_stimulus(option_selector_1)
    live_queue_stimulus(option_selector_2)
    live_queue_stimulus(option_selector_3)
    live_queue_stimulus(option_selector_4)
    live_queue_stimulus(option_selector_5)
    /*
    live_queue_stimulus(option_selector_6)
    live_queue_stimulus(option_selector_7)
    */
    update_display()
%end
