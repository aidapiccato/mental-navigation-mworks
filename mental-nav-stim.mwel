//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stimuli
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Stimuli display parameters
var stim_size = 7
var stim_padding = 2
var stim_position_y = 1
var view_options = 0
%define num_options = 6
var nconsecsucc_increment = 3
var alpha_inc = 0.05
var depth_display = 1
group 'Behavior' {
    var nsuccess = 0
    var nfailure = 0
    var sel_index = 0
    var nconsecsuccess = 0
}
group 'Python parameters' {
    var py_start_stim_index = 0
    var py_end_stim_index = 0
    var py_pair_index = 0
    var py_stim_dist_cum = []
    var py_meta_index = 0
    var py_stim_drift_direction = 0
    var py_options_list = []
    var py_num_options = 0
}

%define num_stims = 6
var num_pairs = num_stims * (num_stims - 1)

group 'Sequence variables' {

    var start_stim_index = 0
    var end_stim_index = 0
    var stim_index (scope = local; default_value = 0)
    var pair_index (scope = local; default_value = 0)
    var option_stim_index (scope = local; default_value = 0)
    var stim_dist_cum = [0, 0, 0, 0, 0, 0]
}

group 'Stimulus drift variables' {
    var stim_drift_speed = 8
    var stim_drift_direction = 0
    var stim_drift_start_time = 0
    var stim_drift_fixed = 0
    var stim_offset = 0
}

// Methods to iterate through stimuli and stimuli pairs
%define for_each_stim ()
    range_replicator (
        variable = stim_index
        from = 0
        to = num_stims - 1
        step = 1
        )
%end

%define for_each_option_stim ()
    range_replicator (
        variable = option_stim_index
        from = 0
        to = num_options - 1
        step = 1
    )
% end

%define for_each_pair ()
    range_replicator (
        variable = pair_index
        from = 0
        to = num_pairs - 1
        step = 1
       )
%end


%define stim_drift_wrap = (py_stim_drift_direction == -1 and start_stim_index > end_stim_index) or (py_stim_drift_direction == 1 and end_stim_index > start_stim_index)
%define stim_drift_symb_dist = abs(stim_drift_wrap * num_stims - abs(start_stim_index - end_stim_index))
%define stim_drift_spat_dist = abs(stim_drift_wrap * stim_dist_cum[num_stims - 1] + py_stim_drift_direction * (stim_dist_cum[start_stim_index] - stim_dist_cum[end_stim_index]))

var stim_drift_wrap_var = stim_drift_wrap
var stim_drift_symb_dist_var = stim_drift_symb_dist
var stim_drift_spat_dist_var = stim_drift_spat_dist

%define stim_drift_max = display_bounds('right') - stim_offset
%define stim_drift_min = display_bounds('left') - stim_offset - (num_stims - 1) * (stim_size) - stim_dist_cum[num_stims - 1] * stim_padding

var stim_drift_max_var = stim_drift_max
var stim_drift_min_var = stim_drift_min


%define stim_drift = stim_drift_direction * stim_drift_speed * (next_frame_time() - stim_drift_start_time) / 1e6

%define stim_drift_end_pos = stim_drift_symb_dist * stim_size + stim_drift_spat_dist * stim_padding
%define stim_drift_end_neg = stim_drift_direction * (stim_drift_symb_dist * stim_size + stim_drift_spat_dist * stim_padding)


%define stim_seq_length = (num_stims) * (stim_size) + stim_dist_cum[num_stims - 1] * stim_padding
%define stim_position_x = stim_offset + ${stim_index} * (stim_size) + stim_dist_cum[${stim_index}] * stim_padding + stim_drift + stim_drift_fixed

%define stim_wrapped_right = ((stim_position_x < (display_bounds('left') - stim_size/2)))
%define stim_wrapped_left  = ((stim_position_x > (display_bounds('right') + stim_size/2)))
var option_distance = 8
var option_stim_size = 5
var option_selector_distance = 13
%define option_stim_position_x = option_distance * cos(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define option_stim_position_y = option_distance * sin(2 * pi() / num_options * ${options_list}[${option_stim_index}])
%define option_stim_selector_position_x (index) option_selector_distance * cos(2 * pi() / num_options * options_list[index])
%define option_stim_selector_position_y (index) option_selector_distance * sin(2 * pi() / num_options * options_list[index])
%define stim_position_x_wrapped =  (stim_wrapped_right) * stim_seq_length + (-1 * stim_wrapped_left) * stim_seq_length + stim_position_x
%define stim_size_x = 
var begin_drift = 0
var in_fixation = 0
var view_mask = 0
%define view_stim_mask = (1-in_fixation) * (view_options * (1 - (${stim_index} != end_stim_index)) + (1 - view_options))
%define view_stim = (1-in_fixation) * ((1-view_options) + (view_options)  * (1 - (${stim_index} != end_stim_index)))
// %define view_mask = (1-in_fixation)
var m_alpha = 0
%define alpha_multiplier_drift = min(max(m_alpha * abs(stim_drift), 0), 1)
%define alpha_multiplier_fixed = min(max(m_alpha * abs(stim_drift_fixed), 0), 1)


mask main_mask(
    mask = rectangle
    x_size = stim_size * 3
    x_position = 0
    y_position = 0
)

stimulus_group mask_stims {
    for_each_stim {
        rectangle 'mask_stim_${stim_index}' (
            color = 0.1, 0.1, 0.1
            x_size = stim_size
            x_position = stim_position_x_wrapped
            y_position = 0
            alpha_multiplier = view_stim * (abs(stim_drift_direction) * alpha_multiplier_drift + (1-abs(stim_drift_direction)) * alpha_multiplier_fixed)
	    )
    }
}

stimulus_group option_stims {
    for_each_option_stim {
        image_file 'img_option_stim_${option_stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/imageset5/${option_stim_index}.jpg"
            x_size = option_stim_size
            x_position = option_stim_position_x
            y_position = option_stim_position_y
	        alpha_multiplier =  view_options
	    )
    }
}

rectangle center_indicator (
    color = 0, 0, 0
    x_size = stim_size + 0.75
    y_size = stim_size + 0.75
    y_position = 0
    x_position = 0
    alpha_multiplier = view_stim
)

rectangle center_indicator_fill (
    color = 0.5, 0.5, 0.5
    x_size = stim_size + 0.25
    y_size = stim_size + 0.25
    y_position = 0
    x_position = 0
    alpha_multiplier = view_stim
)
stimulus_group img_stims {
    for_each_stim {
        image_file 'img_stim_${stim_index}' (
            path = "/Users/apiccato/PyCharmProjects/mental-navigation-mworks/images/imageset5/${stim_index}.jpg"
            x_size = stim_size
            x_position = stim_position_x_wrapped
	        y_position = 0
	        alpha_multiplier = view_stim
        )
    }
}

var eye_in_selector_0 = 0
var eye_in_selector_1 = 0
var eye_in_selector_2 = 0
var eye_in_selector_3 = 0
var eye_in_selector_4 = 0
var eye_in_selector_5 = 0

circular_fixation_point option_selector_0 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_0
    x_position = option_stim_selector_position_x (0)
    y_position = option_stim_selector_position_y (0)
    x_size = 1
    color = (1 - eye_in_selector_0), eye_in_selector_0, 0
)

circular_fixation_point option_selector_1 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_1
    x_position = option_stim_selector_position_x (1)
    y_position = option_stim_selector_position_y (1)
    x_size = 1
    color = (1 - eye_in_selector_1), eye_in_selector_1, 0
)

circular_fixation_point option_selector_2 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_2
    x_position = option_stim_selector_position_x (2)
    y_position = option_stim_selector_position_y (2)
    x_size = 1
    color = (1 - eye_in_selector_2), eye_in_selector_2, 0
)
circular_fixation_point option_selector_3 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_3
    x_position = option_stim_selector_position_x (3)
    y_position = option_stim_selector_position_y (3)
    x_size = 1
    color = (1 - eye_in_selector_3), eye_in_selector_3, 0
)

circular_fixation_point option_selector_4 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_4
    x_position = option_stim_selector_position_x (4)
    y_position = option_stim_selector_position_y (4)
    x_size = 1
    color = (1 - eye_in_selector_4), eye_in_selector_4, 0
)

circular_fixation_point option_selector_5 (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_selector_5
    x_position = option_stim_selector_position_x (5)
    y_position = option_stim_selector_position_y (5)
    x_size = 1
    color = (1 - eye_in_selector_5), eye_in_selector_5, 0
)

%define display_option_selectors()
    live_queue_stimulus(option_selector_0)
    live_queue_stimulus(option_selector_1)
    live_queue_stimulus(option_selector_2)
    live_queue_stimulus(option_selector_3)
    live_queue_stimulus(option_selector_4)
    live_queue_stimulus(option_selector_5)
    update_display()
%end

%define remove_option_selectors()
    dequeue_stimulus(option_selector_0)
    dequeue_stimulus(option_selector_1)
    dequeue_stimulus(option_selector_2)
    dequeue_stimulus(option_selector_3)
    dequeue_stimulus(option_selector_4)
    dequeue_stimulus(option_selector_5)
    update_display()
%end