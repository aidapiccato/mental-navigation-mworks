%include 'mental-nav-stim'
%include 'keyboard_device'
var eye_h_raw = 0
var eye_v_raw = 0

var nsuccess = 0
var nfailure = 0

var eye_h_calibrated = 0
var eye_v_calibrated = 0

standard_eye_calibrator eye_calibrator (
    eyeh_raw = eye_h_raw
    eyev_raw = eye_v_raw
    eyeh_calibrated = eye_h_calibrated
    eyev_calibrated = eye_v_calibrated
    )

var eye_h = 0
var eye_v = 0

boxcar_filter_1d (
    in1 = eye_h_calibrated
    out1 = eye_h
    width_samples = 5
    )

boxcar_filter_1d (
    in1 = eye_v_calibrated
    out1 = eye_v
    width_samples = 5
    )

var fixation_width = 2
var fixation_point_size = 1
var fixation_pos_x = 0
var fixation_pos_y = 0
var eye_in_window = false

circular_fixation_point fixation_point (
    trigger_width = fixation_width
    trigger_watch_x = eye_h
    trigger_watch_y = eye_v
    trigger_flag = eye_in_window
    color = 1,0,0
    x_size = fixation_point_size
    x_position = fixation_pos_x
    y_position = fixation_pos_y
)

var saccade = false

basic_eye_monitor (
    eyeh_calibrated = eye_h
    eyev_calibrated = eye_v
    eye_state = saccade
    width_samples = 5
    saccade_entry_speed = 60
    saccade_exit_speed = 20
)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Display
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// var stim_onset=0

var br=.5
var bg=.5
var bb=.5

stimulus_display (
    background_color = br, bg, bb
    redraw_on_every_refresh = true
    announce_stimuli_on_implicit_updates = false
)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Experiment parameters
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


var num_trials_per_block = 10

var trials_from_meta = 1
var selection_index = 0

selection trial_index (
    values = 0:num_pairs
    selection = random_without_replacement
    advance_on_accept = YES
    autoreset = YES
)


%define update_trial_params_from_meta ()
    trials_from_meta = 1
    selection_index = trial_index
    run_python_string(get_metaparameters())
    report('Trial $py_meta_index')
    start_stim_index = py_start_stim_index
    end_stim_index = py_end_stim_index
    pair_index = py_pair_index
    stim_dist_cum = py_stim_dist_cum
    py_meta_index = py_meta_index
    // stim_drift_direction = py_stim_drift_direction
%end

%define update_trial_params_from_meta_ones ()
    trials_from_meta = 1
    selection_index = trial_index
    run_python_string(get_metaparameters())
    report('Trial $py_meta_index')
    start_stim_index = py_start_stim_index
    end_stim_index = py_end_stim_index
    pair_index = py_pair_index
    stim_dist_cum = py_stim_dist_cum
    py_meta_index = py_meta_index
    // stim_drift_direction = py_stim_drift_direction
%end

%define reset_vars ()
    start_stim_index = 0
    end_stim_index = 0
    pair_index = 0
    stim_offset = 0
    stim_drift_direction = 0
    view_options = 0
    begin_drift = 0
%end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

fake_monkey eye_tracker {
    iochannel/eye_movement (
        eye_h = eye_h_raw
        eye_v = eye_v_raw
        data_interval = 1ms
        update_interval = 10ms
    )
}

%define simulate_fixation ()
    fake_monkey_saccade_and_fixate (
        fake_monkey = eye_tracker
        h = fixation_pos_x
        v = fixation_pos_y
        duration = 10 s
     )
%end

%define simulate_fixation_choice ()
    fake_monkey_saccade_and_fixate (
        fake_monkey = eye_tracker
        h = option_selector_distance * cos(2 * pi() / num_options * end_stim_index)
        v = option_selector_distance * sin(2 * pi() / num_options * end_stim_index)
        duration = 10s
     )
%end

protocol 'Mental Navigation - Sequential' {
    start_io_device (eye_tracker)
    start_io_device (keyboard)
    for_each_stim {
        list {
	        live_queue_stimulus (img_stims[stim_index])
	        live_queue_stimulus (maskstims[stim_index])
        }
    }
    for_each_option_stim {
        list {
            live_queue_stimulus(option_stims[option_stim_index])
            live_queue_stimulus(option_stims_selectors[option_stim_index])
        }
    }
    reset_selection (trial_index)
    run_python_file('mental-nav_utils.py')
    block (nsamples = num_trials_per_block) {
        trial {
            task {
                state 'Begin fixation' {
                    report ("*********BEGIN FIXATION**********")
                    live_queue_stimulus (fixation_point)
                    update_display ()
                    wait (1s)
                    simulate_fixation ()
                    goto (
                        target = 'Upon fixation'
                        when = eye_in_window and (not saccade)
                    )
                }
                state 'Upon fixation' {
                    report ("*********UPON FIXATION**********")
                    dequeue_stimulus (fixation_point)
                    update_display()
                    update_trial_params_from_meta_ones()
                    begin_drift = 1
                    stim_drift_wrap_var = stim_drift_wrap
                    stim_drift_symb_dist_var = stim_drift_symb_dist
                    stim_drift_spat_dist_var = stim_drift_spat_dist
                    report ('direction = $py_stim_drift_direction')
                    report ('start index = $start_stim_index')
                    report ('end index = $end_stim_index')
                    report ('stim_drift_wrap = $stim_drift_wrap_var')
                    report ('stim_drift_symb_dist = $stim_drift_symb_dist_var')
                    report ('stim_drift_spat_dist = $stim_drift_spat_dist_var')
                    report ('stim_dist_cum = $stim_dist_cum')
                    stim_offset = -start_stim_index * (stim_size) - stim_dist_cum[start_stim_index] * stim_padding
                    stim_drift_fixed = 0
                    wait (3s)
                    goto (
                        target = 'Begin drift'
                    )
                }
                state 'Begin drift' {
                    report ("*********BEGIN DRIFT**********")
                    stim_drift_direction = py_stim_drift_direction
                    stim_drift_start_time = next_frame_time()
                    goto (
                        target = 'End drift'
                        when = (stim_drift_direction == 1 and stim_drift >= stim_drift_end_pos) or (stim_drift_direction == -1 and stim_drift <= stim_drift_end_neg)
                    )
                }
                state 'End drift' {
                    report ("*********END DRIFT**********")
                    stim_drift_fixed = stim_drift
                    stim_drift_direction = 0
                    wait (1s)
                    goto (
                        target = 'Present options'
                    )
                }
                state 'Present options' {
                    report ("*********PRESENT OPTIONS**********")
                    view_options = 1
                    display_selector ()
                    wait (1s)
                    simulate_fixation_choice()
                    start_timer (
                        timer = selection_timer
                        duration = 2s
                    )
                    goto (
                        target = 'Success'
                        when = eye_in_selector and (not saccade)
                    )
                    goto (
                        target = 'Failure'
                        when = timer_expired(selection_timer)

                    )
                }
                state 'Success' {
                    report ("*********SUCCESS**********")
                    nsuccess = nsuccess + 1

                    wait (1s)
                    goto ('End trial')
                }
                state 'Failure' {
                    report ("*********FAILURE**********")
                    nfailure = nfailure + 1
                    wait (1s)
                    goto ('End trial')
                }
                state 'End trial' {
                    report ("*********END TRIAL**********")
                    accept_selections (trial_index)
                    reset_vars()

                    yield ()
                }
            }
        }
    }
    stop_io_device (eye_tracker)
    stop_io_device (keyboard)
}