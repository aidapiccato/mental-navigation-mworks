%include 'mental-nav-stim'
%include 'eye'

%include 'keyboard_device'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Display
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// var stim_onset=0

var br=.5
var bg=.5
var bb=.5

var margin = 10e-4
stimulus_display (
    background_color = br, bg, bb
    redraw_on_every_refresh = true
    announce_stimuli_on_implicit_updates = false
)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Experiment parameters
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


var num_trials_per_block = 10

var trials_from_meta = 1
var selection_index = 0

selection trial_index (
    values = 0:num_pairs
    selection = random_without_replacement
    advance_on_accept = YES
    autoreset = YES
)

var options_pos = [0, 0, 0, 0, 0, 0]
var options_bin = [0, 0, 0, 0, 0, 0]

%define update_trial_params_from_meta ()
    trials_from_meta = 1
    selection_index = trial_index
    run_python_string(get_metaparameters())
    report('Trial $py_meta_index')
    start_stim_index = py_start_stim_index
    end_stim_index = py_end_stim_index
    pair_index = py_pair_index
    stim_dist_cum = py_stim_dist_cum
    py_meta_index = py_meta_index
    options_bin = py_options_bin
    options_pos = py_options_pos
    num_options = py_num_options
    // stim_drift_direction = py_stim_drift_direction
%end

%define update_trial_params_from_meta_ones ()
    trials_from_meta = 1
    selection_index = trial_index
    run_python_string(get_metaparameters())
    report('Trial $py_meta_index')
    start_stim_index = py_start_stim_index
    end_stim_index = py_end_stim_index
    pair_index = py_pair_index
    stim_dist_cum = py_stim_dist_cum
    py_meta_index = py_meta_index
    options_bin = py_options_bin
    options_pos = py_options_pos
    num_options = py_num_options
    // stim_drift_direction = py_stim_drift_direction
%end

%define reset_vars ()
    start_stim_index = 0
    end_stim_index = 0
    pair_index = 0
    stim_offset = 0
    stim_drift_direction = 0
    view_options = 0
    begin_drift = 0
%end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Protocol
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


protocol 'Mental Navigation - Sequential' {
    start_io_device (eye_tracker)
    start_io_device (keyboard)
    queue_stimulus (center_indicator)
    queue_stimulus (center_indicator_fill)
    for_each_stim {
        list {
	        live_queue_stimulus (img_stims[stim_index])
	        live_queue_stimulus (mask_stims[stim_index])
        }
    }
    reset_selection (trial_index)
    run_python_file('mental-nav_utils.py')
    block (nsamples = num_trials_per_block) {
        trial {
            update_trial_params_from_meta_ones()
            report ('$options_bin')
            report ('$options_pos')
            report('here')
            for_each_option_stim {
                list {
                    live_queue_stimulus(option_stims[option_stim_index])
                }
            }
            task {
                state 'Begin fixation' {
                    in_fixation = 1
                    report ("*********BEGIN FIXATION**********")
                    queue_stimulus (fixation_point)
                    queue_stimulus(main_mask)
                    update_display ()
                    wait (1s)
                    simulate_fixation ()
                    goto (
                        target = 'Upon fixation'
                        when = eye_in_window and (not saccade)
                    )
                }
                state 'Upon fixation' {
                    // can put this in method
                    if (nconsecsuccess == nconsecsucc_increment) {
                        nconsecsuccess = 0
                        m_alpha = min(1, alpha_inc + m_alpha)
                    }
                    report ("*********UPON FIXATION**********")
                    dequeue_stimulus (fixation_point)
                    update_display ()
                    stim_drift_wrap_var = stim_drift_wrap
                    stim_drift_symb_dist_var = stim_drift_symb_dist
                    stim_drift_spat_dist_var = stim_drift_spat_dist
                    report ('direction = $py_stim_drift_direction')
                    report ('start index = $start_stim_index')
                    report ('end index = $end_stim_index')
                    report ('stim_drift_wrap = $stim_drift_wrap_var')
                    report ('stim_drift_symb_dist = $stim_drift_symb_dist_var')
                    report ('stim_drift_spat_dist = $stim_drift_spat_dist_var')
                    report ('stim_dist_cum = $stim_dist_cum')
                    stim_offset = -start_stim_index * (stim_size) - stim_dist_cum[start_stim_index] * stim_padding
                    stim_drift_fixed = 0
                    in_fixation = 0
                    wait (1s)
                    goto (
                        target = 'Begin drift'
                    )
                }
                state 'Begin drift' {
                    report ("*********BEGIN DRIFT**********")
                    begin_drift = 1
                    stim_drift_direction = py_stim_drift_direction
                    stim_drift_start_time = next_frame_time()
                    goto (
                        target = 'End drift'
                        // Make line below more legible
                        when = (stim_drift_direction == 1 and stim_drift >= stim_drift_end_pos - margin) or (stim_drift_direction == -1 and stim_drift <= stim_drift_end_neg + margin)
                    )
                }
                state 'End drift' {
                    report ("*********END DRIFT**********")
                    stim_drift_fixed = stim_drift
                    stim_drift_direction = 0
                    wait (1s)
                    goto (
                        target = 'Present options'
                    )
                }
                state 'Present options' {
                    report ("*********PRESENT OPTIONS**********")
                    begin_drift = 0
                    view_options = 1
                    display_option_selectors()
                    wait (2s)
                    simulate_fixation_choice(options_pos[end_stim_index])
                    wait (3s)
                    start_timer (
                        timer = selection_timer
                        duration = 2s
                    )
                    goto (
                        target = 'Selected 0'
                        when = eye_in_selector_0 and (not saccade)
                    )
                    goto (
                        target = 'Selected 1'
                        when = eye_in_selector_1 and (not saccade)
                    )
                    goto (
                        target = 'Selected 2'
                        when = eye_in_selector_2 and (not saccade)
                    )
                    goto (
                        target = 'Selected 3'
                        when = eye_in_selector_3 and (not saccade)
                    )
                    goto (
                        target = 'Selected 4'
                        when = eye_in_selector_4 and (not saccade)
                    )
                    goto (
                        target = 'Selected 5'
                        when = eye_in_selector_5 and (not saccade)
                    )
                    goto (
                        target = 'Failure'
                        when = timer_expired(selection_timer)
                    )
                }
                state 'Selected 0' {
                     report ("************SELECTED 0************")
                     goto (
                        target = 'Success'
                        when = end_stim_index == 0
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 0
                    )
                }
                state 'Selected 1' {
                    report ("************SELECTED 1************")
                    goto (
                        target = 'Success'
                        when = end_stim_index == 1
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 1
                    )
                }
                state 'Selected 2' {
                    report ("************SELECTED 2************")
                    goto (
                        target = 'Success'
                        when = end_stim_index == 2
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 2
                    )
                }
                state 'Selected 3' {
                    report ("************SELECTED 3************")
                    goto (
                        target = 'Success'
                        when = end_stim_index == 3
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 3
                    )
                }
                state 'Selected 4' {
                    report ("************SELECTED 4************")
                    goto (
                        target = 'Success'
                        when = end_stim_index == 4
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 4
                    )
                }
                state 'Selected 5' {
                    report ("************SELECTED 5************")
                    goto (
                        target = 'Success'
                        when = end_stim_index == 5
                    )
                    goto (
                        target = 'Failure'
                        when = end_stim_index != 5
                    )
                }
                state 'Success' {
                    report ("*********SUCCESS**********")
                    nsuccess = nsuccess + 1
                    nconsecsuccess = nconsecsuccess + 1
                    wait (1s)
                    goto ('End trial')
                }
                state 'Failure' {
                    report ("*********FAILURE**********")
                    nfailure = nfailure + 1
                    nconsecsuccess = 0
                    wait (1s)
                    goto ('End trial')
                }
                state 'End trial' {
                    report ("*********END TRIAL**********")
                    remove_option_selectors()
                    accept_selections (trial_index)
                    reset_vars()
                    yield ()
                }
            }
        }
    }
    stop_io_device (eye_tracker)
    stop_io_device (keyboard)
}
