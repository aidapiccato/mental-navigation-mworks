group 'Python variables' {
    var py_seq_index = 0
    var py_seqs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    var py_n_stims = 0
    var py_stim_paths = []
}

group 'Sequence variables' {
    var n_stims = 0
    var stim_paths = ['', '', '', '', '', '']
    var n_conditions = 0
    var block_index = -1
}

group 'Block variables' {
    var trial_index = 0
    var trial_id = 0
}

group 'Experiment variables' {
    var meta_index = 1
    var subject_id = 0
    var seq_index = 0
    var seq_id = 0
    var seqs = [0]
}

var performance = 0

%define new_block ()
    reset_selections(trial_index)
    block_index = block_index + 1
%end

%define new_seq ()
    block_index = 0
    seq_index = seq_index + 1
    update_sequence_params_from_meta ()

%end


%define update_sequence_params_from_meta ()
    run_python_string(get_seq_metaparameters())
    n_stims = py_n_stims
    stim_paths = py_stim_paths
    n_conditions = n_stims * n_stims * 2
%end

selection trial_index (
    values = 0:n_conditions
    selection = random_without_replacement
    advance_on_accept = YES
    autoreset = YES
)


protocol '1. Set subject ID = 1' {
    subject_id = 1
}

protocol '2. Load sequences' {
    run_python_file('mental-nav_utils.py')
    run_python_string(get_subject_metaparameters())
    seqs = py_seqs
    seq_index = py_seq_index
    seq_id = seqs[seq_index]
}


protocol '3. Begin experiment' {
    report ('***********BEGIN EXPERIMENT***********')
    new_seq ()
    block (nsamples = 3 * 100) {
        trial {
            report ('***********BEGIN BLOCK $block_index***********')
            new_block ()
            trial (nsamples = n_conditions) {
                task {
                    state 'Begin trial' {
                        report ('***********BEGIN TRIAL $trial_index, BLOCK $block_index***********')
                        wait (2s)
                        goto ( 'End trial' )
                    }
                    state 'End trial' {
                        report ('***********END TRIAL***********')

                        n_trials_in_block = n_trials_in_block + 1

                        accept_selections (trial_index)

                        if (n_trials_in_block == n_conditions) {
                            performance = rand(0, 1)
                            if (performance > 0.5) {
                                report ('restarting block')
                                reject_selections (block_index)
                            }
                            if (performance <= 0.5) {
                                report ('moving on to next block')
                                accept_selections (block_index)
                            }
                        }
                        yield ()
                    }
                }
            }
        }
    }
}